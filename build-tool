#!/bin/bash
set -Ceu

DEFAULT_OPAM_VERSION=2.0.1

usage() {
  cat <<EOF >&2
極力環境を汚さないようにビルドツールをインストールし、実行します。
USAGE:
  $0 [OPTIONS] <COMMAND> ...

EXAMPLE:
  $0 --prefix=tmp --go-version=1.11.2 go version

OPTIONS:
  --prefix         ツールをインストールするディレクトリ
  --go-version     インストールする Go のバージョン
  --ocaml-version  インストールする OCaml のバージョン
  --rust-version   インストールする Rust のバージョン

COMMAND:
  - Go
      go / godoc / gofmt
  - OCcaml
      opam / ocaml / ocamlopt ...
  - Rust
      rustup / cargo / rustc
EOF
  exit 1
}

install_go() {
  : "${PREFIX?not defined}"
  : "${GO_VERSION?not defined}"
  [ -x "$PREFIX/go${GO_VERSION}/bin/go" ] && return

  local fname
  # refs https://golang.org/doc/install
  case $(uname) in
    Linux )
      fname="go${GO_VERSION}.linux-amd64.tar.gz" ;;
    Darwin )
      fname="go${GO_VERSION}.darwin-amd64.tar.gz" ;;
    * )
      echo "$(uname) is not supported." >&2
      exit 1
  esac
  mkdir -p "$PREFIX"
  rm -rf "$PREFIX/go"
  rm -rf "$PREFIX/go${GO_VERSION}"
  curl -L "https://dl.google.com/go/$fname" | tar -C "$PREFIX" -xzf -
  mv "$PREFIX/go" "$PREFIX/go${GO_VERSION}"
}

install_opam() {
  : "${PREFIX?not defined}"
  export OPAMROOT="$PREFIX/opam"
  if [ ! -x "$PREFIX/bin/opam" ]; then
    mkdir -p "$PREFIX/bin"
    curl -L -o "$PREFIX/bin/opam.tmp" \
      "https://github.com/ocaml/opam/releases/download/${DEFAULT_OPAM_VERSION}/opam-${DEFAULT_OPAM_VERSION}-x86_64-darwin"
    chmod +x "$PREFIX/bin/opam.tmp"
    mv "$PREFIX/bin/opam.tmp" "$PREFIX/bin/opam"
  fi
  # --bare     : コンパイラをまだインストールしない
  # --no-setup : .profileなどを変更しない
  "$PREFIX/bin/opam" init --bare --no-setup
}

install_ocaml() {
  : "${OCAML_VERSION?not defined}"
  install_opam
  if [ "$OCAML_VERSION" != "$("$PREFIX"/bin/opam switch show)" ]; then
    "$PREFIX/bin/opam" switch create -v "$OCAML_VERSION"
  fi
}

install_rustup() {
  : "${PREFIX?not defined}"
  export RUSTUP_HOME="$PREFIX"
  export CARGO_HOME="$PREFIX"
  if [ -x "$PREFIX/bin/rustup" ]; then
    "$PREFIX/bin/rustup" self update 2>/dev/null
  else
    # refs https://rustup.rs/
    curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path -y --default-toolchain none
  fi
}

install_rust_toolchain() {
  : "${RUST_VERSION?not defined}"
  install_rustup
  if ! rustup toolchain list | grep "$RUST_VERSION"- >/dev/null; then
    "$PREFIX/bin/rustup" toolchain install "$RUST_VERSION"
  fi
}

while [ "$#" != 0 ]; do
  case "$1" in
    --prefix=* )
      export PREFIX="${1#*=}" ;;
    --go-version=* )
      export GO_VERSION="${1#*=}" ;;
    --ocaml-version=* )
      export OCAML_VERSION="${1#*=}" ;;
    --rust-version=* )
      export RUST_VERSION="${1#*=}" ;;
    --* )
      echo "Option \`${1}\` is not supported." >&1
      exit 1 ;;
    * ) break
  esac
  shift
done

[ "$#" = 0 ] && usage

cmd="$1"
shift
case "$cmd" in
  help )
    usage ;;
  go | godoc | gofmt )
    install_go
    "$PREFIX/go${GO_VERSION}/bin/$cmd" "$@" ;;
  opam )
    install_opam
    "$PREFIX/bin/$cmd" "$@" ;;
  ocaml* )
    install_ocaml
    "$PREFIX/opam/$OCAML_VERSION/bin/$cmd" "$@" ;;
  rustup )
    install_rustup
    "$PREFIX/bin/$cmd" "$@" ;;
  cargo | rustc )
    install_rust_toolchain
    "$PREFIX/bin/rustup" run "$RUST_VERSION" "$cmd" "$@" ;;
  * )
    echo "\`$cmd\` is not supported." >&2
    exit 1
esac
